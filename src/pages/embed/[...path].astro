---
import NavButtons from '@components/buttons/NavButtons.astro'
import EmbedLayout from '@layouts/EmbedLayout.astro'
import Title from '@components/Title.astro'
import AuthorSection from '@components/AuthorSection.astro'
import TagList from '@components/tags/TagList.astro'
import BodySection from '@components/BodySection.astro'
import Message from '@components/Message.astro'
import ShareStory from '@components/ShareStory.astro'
import Soundcite from '@components/Soundcite.astro'
import SEO from '@components/SEO.astro'
import allStories from '@data/all_stories.json'
import { translations } from '@data/translations.js'

const lang = 'en'

// Create all pages based on stories array, for both English and Arabic language
export async function getStaticPaths() {
	// Filter stories only use those with .m4a or .mp3 in the attachments
	const stories = allStories.filter((story) => story.attachments.some((attachment) => attachment.endsWith('.m4a') || attachment.endsWith('.mp3')))

	const allPathsAudio = stories.map((story) => ({
		params: {
			path: `audio/${story.slugs.en}`,
		},
		props: {
			story,
			stories,
		},
	}))

	const allPaths = [...allPathsAudio]

	return allPaths
}

// Define props
const { story, stories } = Astro.props

// Assuming story.story[lang].content contains your text
const content = story.story[lang].content

// Step 1: Split into paragraphs at every "\n\n"
const paragraphs = content.split('\n')

// Step 2: Within each paragraph, replace "<single-break/>" with "<br/>", and handle single "\n" by replacing them with "<br/>" as well
const contentArray = paragraphs.map(
	(paragraph) => paragraph.replace(/<single-break\/>/g, '<br/>').replace(/\n/g, '<br/>'), // Replace single newlines with <br/>, assuming that's the desired behavior
)

// Find the current story index based on the slug in the provided language
const currentIndex = stories.findIndex((s) => s.slugs.en === story.slugs.en)

// Calculate previous and next indexes with wrapping
const prevIndex = currentIndex - 1 < 0 ? stories.length - 1 : currentIndex - 1
const nextIndex = (currentIndex + 1) % stories.length

// Extract slugs for previous and next stories in the desired language
const prevStorySlug = stories[prevIndex].slugs[lang] // Adjust 'en' as needed for language
const nextStorySlug = stories[nextIndex].slugs[lang] // Adjust 'en' as needed for language

const dir = 'ltr'

function processAudioFiles(files) {
	// Filter the array for audio files (.mp3 or .m4a extensions)
	const audioFiles = files.filter((file) => file.endsWith('.mp3') || file.endsWith('.m4a'))

	// In case you need the filtered list outside, you can also return it
	return audioFiles
}

// Example of using the function
const processedAudioFiles = processAudioFiles(story.attachments)
const hasAudioFiles = processedAudioFiles.length > 0

const storyTitle = story.story[lang].title || `${lang.toUpperCase()} title for story ID #${story.id} is missing`

const readInOtherLanguage = translations.readIn[lang]
---

<EmbedLayout>
	<SEO title={storyTitle} description={story.story[lang].content} />
	<!-- <div class='fixed top-0 left-0 w-screen h-screen -z-1 pointer-events-none' id='stars'></div>-->
	<div class='fixed top-0 left-0 w-screen h-screen -z-1 pointer-events-none' id='city'></div>
	<div class='w-full max-w-5xl m-0 px-4' class='story-detail-page--wrapper' id='story-wrapper' dir='ltr'>
		<div class='flex flex-col gap-3 sm:gap-5 z-10 h-screen'>
			<!-- Adjusted: added h-screen for full viewport height -->
			<div class='w-full grid grid-cols-3 mt-3 mb-1'>
				<a href={`/embed/audio/${prevStorySlug}`}><button class='bg-white text-black font-bold px-3 py-1'>← Back</button></a>
				<a
					class='text-center'
					href={`https://yemenlisteningproject.thenewhumanitarian.org/stories/en/${story.slugs.en}`}
					target='_blank'
					rel='noopener noreferrer'><button class='bg-burgundy text-white font-bold px-3 py-1'>Read more</button></a
				>
				<a class='text-right' href={`/embed/audio/${nextStorySlug}`}><button class='bg-white text-black font-bold px-3 py-1'>Next →</button></a>
			</div>
			<div class='flex'>
				<div class='w-full flex flex-col items-center justify-center'>
					<h1 class='font-title m-0 p-0 text-center text-2xl mt-3 mb-2'>{storyTitle}</h1>
				</div>
			</div>

			<div class='flex-grow'>
				<!-- Adjusted: added flex-grow -->
				<Message contentArray={contentArray} lang={'en'} slot='message'>
					{
						hasAudioFiles &&
							processedAudioFiles.map((file, i) => (
								<div class='text-left'>
									<Soundcite
										data-vtbot-replace='main'
										text={`${story.audioReadouts[lang] || `Audio readout text for ${lang.toUpperCase()} is missing in Google Spreadsheet...`}`}
										src={`/attachments/${file}`}
										plays={1}
										start={0}
										end={parseInt(file.match(/(\d+)s\.[a-zA-Z0-9]+$/)[1], 10) * 1000}
										lang={lang}
										short={true}
									/>
								</div>
							))
					}
				</Message>
				<!-- <a href={`https://yemenlisteningproject.thenewhumanitarian.org/stories/en/${story.slugs.en}`} target='_blank' rel='noopener noreferrer'>
					<button class='text-white px-3 py-1 underline hover:text-burgundy transition-all'>Read more</button>
				</a> -->
			</div>
		</div>
	</div>
</EmbedLayout>

<style>
	body {
		background: black;
	}
</style>

<style is:global>
	body * {
		color: white;
	}

	body {
		overflow-y: hidden;
	}

	#stars {
		z-index: -1;
		background: black;
		/* Add the blur effect */
		filter: blur(3px);
		-webkit-filter: blur(3px);
	}

	.story-w a {
		color: white;
	}

	#story-wrapper.en * {
		text-align: left;
	}

	#story-wrapper.ar * {
		text-align: right;
	}

	#story-wrapper code {
		display: none;
	}

	/* Classes and keyframe animations for stars */
	@keyframes STAR {
		0% {
			background: powderblue;
			height: 1px;
			width: 1px;
			box-shadow: 0px 0px 10px white;
		}

		10% {
			background: #b0e5de;
		}

		20% {
			background: #b0e5cc;
		}

		30% {
			background: #cce5b0;
		}

		40% {
			background: #dae5b0;
		}

		50% {
			background: #e5ddb0;
			width: 4px;
			height: 4px;
			box-shadow: 0px 0px 10px #d3bd3d;
		}

		100% {
			width: 1px;
			height: 1px;
			background: powderblue;
			box-shadow: 0px 0px 10px white;
		}
	}

	@keyframes pulse {
		0% {
			background: powderblue;
			height: 1px;
			width: 1px;
			box-shadow: 0px 0px 10px white;
		}

		10% {
			background: #b0e5de;
		}

		20% {
			background: #b0e5cc;
		}

		30% {
			background: #cce5b0;
		}

		40% {
			background: #dae5b0;
		}

		50% {
			background: #e5ddb0;
			width: 4px;
			height: 4px;
			box-shadow: 0px 0px 10px #d3bd3d;
		}

		100% {
			width: 1px;
			height: 1px;
			background: powderblue;
			box-shadow: 0px 0px 10px white;
		}
	}

	.star {
		z-index: -1;
		height: 1px;
		width: 1px;
		border-radius: 5px;
		box-shadow: 0px 0px 10px white;
		background: powderblue;
		position: absolute;
	}

	.star.pulse {
		z-index: 10;
	}

	.star.pulse.one {
		-webkit-animation: STAR 1s infinite;
		animation: STAR 1s infinite;
		-moz-animation: STAR 1s infinite;
	}

	.star.pulse.two {
		-webkit-animation: STAR 2s infinite;
		animation: STAR 2s infinite;
		-moz-animation: STAR 2s infinite;
	}

	.star.pulse.three {
		-webkit-animation: STAR 3s infinite;
		animation: STAR 3s infinite;
		-moz-animation: STAR 3s infinite;
	}

	.star.pulse.four {
		-webkit-animation: STAR 4s infinite;
		animation: STAR 4s infinite;
		-moz-animation: STAR 4s infinite;
	}

	.star.pulse.five {
		-webkit-animation: STAR 5s infinite;
		animation: STAR 5s infinite;
		-moz-animation: STAR 5s infinite;
	}

	@media screen and (max-width: 768px) {
		#language-buttons:not(.always-visible) {
			display: none;
		}
	}

	.keyboard {
		display: flex;
		justify-content: center;
		gap: 1rem;
		font-family: 'Comic Sans MS', 'Arial', sans-serif;
		opacity: 0.5;
	}

	.key {
		border: 2px solid white;
		display: flex;
		justify-content: center;
		align-items: center;
		width: 3rem;
		height: 3rem;
		background-color: #ddd;
		border-radius: 10px;
		box-shadow: 3px 3px 0px #b0b0b0;
	}

	.key span {
		display: block;
		font-size: 24px;
		color: #333;
	}
</style>