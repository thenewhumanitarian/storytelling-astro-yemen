---
// import { ViewTransitions } from 'astro:transitions'
// import ReplacementSwap from 'astro-vtbot/components/ReplacementSwap.astro'
// import LoadingIndicator from 'astro-vtbot/components/LoadingIndicator.astro'
// import VtBotDebug from 'astro-vtbot/components/VtBotDebug.astro'
// import Linter from 'astro-vtbot/components/Linter.astro'

import NavButtons from '@components/buttons/NavButtons.astro'
import Layout from '@layouts/Layout.astro'
import Title from '@components/Title.astro'
import AuthorSection from '@components/AuthorSection.astro'
import TagList from '@components/tags/TagList.astro'
import BodySection from '@components/BodySection.astro'
import Message from '@components/Message.astro'
import ShareStory from '@components/ShareStory.astro'
import Soundcite from '@components/Soundcite.astro'
import SEO from '@components/SEO.astro'
import stories from '@data/all_stories.json'

// Read path parameters for language and slug
const { path } = Astro.params

const pathParams = path?.toString().split('/')
const lang = pathParams?.[0] || 'en'

// Create all pages based on stories array, for both English and Arabic language
export async function getStaticPaths() {
	const allPathsEN = stories.map((story) => ({
		params: {
			path: `en/${story.slugs.en}`,
		},
		props: {
			story,
		},
	}))

	const allPathsAR = stories.map((story) => ({
		params: {
			path: `ar/${story.slugs.ar}`,
		},
		props: {
			story,
		},
	}))

	const allPaths = [...allPathsEN, ...allPathsAR]

	return allPaths
}

// Define props
const { story } = Astro.props

// Create array out of story.story[lang].content by splitting the string wherever there is an \n
// const contentArray = story.story[lang].content
// 	.split('\n\n') // Split at double newline to get paragraphs
// 	.map(
// 		(paragraph) => paragraph.replace(/\n/g, '<br/>'), // Replace single newlines with <br/> within paragraphs
// 	)

// Assuming story.story[lang].content contains your text
const content = story.story[lang].content

// Step 1: Split into paragraphs at every "\n\n"
const paragraphs = content.split('\n')

// Step 2: Within each paragraph, replace "<single-break/>" with "<br/>", and handle single "\n" by replacing them with "<br/>" as well
const contentArray = paragraphs.map(
	(paragraph) => paragraph.replace(/<single-break\/>/g, '<br/>').replace(/\n/g, '<br/>'), // Replace single newlines with <br/>, assuming that's the desired behavior
)

// Find the current story index based on the slug in the provided language
const currentIndex = stories.findIndex((s) => s.slugs.en === story.slugs.en)

// Calculate previous and next indexes with wrapping
const prevIndex = currentIndex - 1 < 0 ? stories.length - 1 : currentIndex - 1
const nextIndex = (currentIndex + 1) % stories.length

// Extract slugs for previous and next stories in the desired language
const prevStorySlug = stories[prevIndex].slugs[lang] // Adjust 'en' as needed for language
const nextStorySlug = stories[nextIndex].slugs[lang] // Adjust 'en' as needed for language

const dir = lang === 'ar' ? 'rtl' : 'ltr'

function processAudioFiles(files) {
	// Filter the array for audio files (.mp3 or .m4a extensions)
	const audioFiles = files.filter((file) => file.endsWith('.mp3') || file.endsWith('.m4a'))

	// In case you need the filtered list outside, you can also return it
	return audioFiles
}

// Example of using the function
const processedAudioFiles = processAudioFiles(story.attachments)
const hasAudioFiles = processedAudioFiles.length > 0
---

<Layout
	dark
	title='The Yemen Listening Project'
	header={true}
	languageButtons={{ ar: `/stories/ar/${story.slugs.ar}`, en: `/stories/en/${story.slugs.en}` }}
	switchViewButtons={false}
	overflow={'always'}
	dir={dir}
>
	<SEO slot='seo' title={`The Yemen Listening Project`} description={story.story['en'].title} />
	<!-- <ViewTransitions /> -->
	<!-- <ReplacementSwap /> -->
	<!-- <LoadingIndicator /> -->

	<div class='fixed top-0 left-0 w-screen h-screen -z-1 pointer-events-none' id='stars' transition:persist></div>
	<div class='fixed top-0 left-0 w-screen h-screen -z-1 pointer-events-none' id='city' transition:persist></div>
	<div
		class='w-full max-w-5xl mx-auto mt-2 sm:mt-5 mb-8 sm:mb-24 px-4'
		class='story-detail-page--wrapper'
		id='story-wrapper'
		dir={lang === 'ar' ? 'rtl' : 'ltr'}
	>
		<div class={`flex justify-center items-center ${lang === 'ar' ? 'flex-row-reverse' : 'flex-row'} nav-buttons menu--hide z-10`}>
			<NavButtons button='previous' lang={lang} href={`/stories/${lang}/${prevStorySlug}`} classNames='hover:text-white hover:bg-zinc-100' />
			<NavButtons id='overview--button--top' button='overview' lang={lang} classNames='text-white bg-burgundy hover:bg-zinc-100 hover:text-burgundy' />
			<NavButtons button='next' lang={lang} href={`/stories/${lang}/${nextStorySlug}`} classNames='hover:text-white hover:bg-zinc-100' />
		</div>
		<div class='flex flex-col gap-3 sm:gap-5 z-10'>
			<div class='flex flex-col lg:flex-row lg:gap-x-5 mb-6'>
				{/* Header section */}
				<div class='w-full flex flex-col items-center justify-center'>
					<Title>
						{story.story[lang].title || `${lang.toUpperCase()} title for story ID #${story.id} is missing`}
					</Title>
					<AuthorSection
						lang={lang}
						name={`${story.personalInfo[lang].name} ${story.personalInfo[lang].surname}`}
						from={story.personalInfo[lang].whereFrom}
						livingIn={story.personalInfo[lang].livingIn}
						age={story.contact.age}
					/>
				</div>
			</div>
			{/* Body section */}
			<BodySection attachments={story.attachments} lang={lang}>
				<Message contentArray={contentArray} lang={lang} slot='message'>
					{
						hasAudioFiles &&
							processedAudioFiles.map((file, i) => (
								<div class={`${i === 0 ? '' : 'hidden'}`}>
									<Soundcite
										data-vtbot-replace='main'
										text={`${story.audioReadouts[lang] || `Audio readout text for ${lang.toUpperCase()} is missing in Google Spreadsheet...`}`}
										src={`/attachments/${file}`}
										plays={1}
										start={0}
										end={parseInt(file.match(/(\d+)s\.[a-zA-Z0-9]+$/)[1], 10) * 1000}
										lang={lang}
									/>
								</div>
							))
					}
					{
						contentArray.map((line) => {
							// console.log(line)
							if (line !== '') {
								return <p class='text-white sm:text-lg' set:html={line} />
							}
						})
					}
				</Message>
			</BodySection>
		</div>
		{/* Tag list */}
		<TagList tags={story.tags} />
		{/* Share story section */}
		<ShareStory story={story} lang={lang} />
		<div class={`flex justify-center items-center ${lang === 'ar' ? 'flex-row-reverse sm:hidden' : 'flex-row sm:hidden'} nav-buttons menu--hide mt-5`}>
			<NavButtons button='previous' lang={lang} href={`/stories/${lang}/${prevStorySlug}`} classNames='hover:text-white hover:bg-zinc-100' />
			<NavButtons id='overview--button--bottom' button='overview' lang={lang} classNames='text-white bg-burgundy hover:bg-zinc-100 hover:text-burgundy' />
			<NavButtons button='next' lang={lang} href={`/stories/${lang}/${nextStorySlug}`} classNames='hover:text-white hover:bg-zinc-100' />
		</div>
	</div>
</Layout>

<style is:global>
	body * {
		color: white;
	}

	body {
		overflow-y: scroll;
	}

	#stars {
		z-index: -1;
		background: black;
		/* Add the blur effect */
		filter: blur(3px);
		-webkit-filter: blur(3px);
	}

	.story-w a {
		color: white;
	}

	#story-wrapper.en * {
		text-align: left;
	}

	#story-wrapper.ar * {
		text-align: right;
	}

	#story-wrapper code {
		display: none;
	}

	/* Classes and keyframe animations for stars */
	@keyframes STAR {
		0% {
			background: powderblue;
			height: 1px;
			width: 1px;
			box-shadow: 0px 0px 10px white;
		}

		10% {
			background: #b0e5de;
		}

		20% {
			background: #b0e5cc;
		}

		30% {
			background: #cce5b0;
		}

		40% {
			background: #dae5b0;
		}

		50% {
			background: #e5ddb0;
			width: 4px;
			height: 4px;
			box-shadow: 0px 0px 10px #d3bd3d;
		}

		100% {
			width: 1px;
			height: 1px;
			background: powderblue;
			box-shadow: 0px 0px 10px white;
		}
	}

	@keyframes pulse {
		0% {
			background: powderblue;
			height: 1px;
			width: 1px;
			box-shadow: 0px 0px 10px white;
		}

		10% {
			background: #b0e5de;
		}

		20% {
			background: #b0e5cc;
		}

		30% {
			background: #cce5b0;
		}

		40% {
			background: #dae5b0;
		}

		50% {
			background: #e5ddb0;
			width: 4px;
			height: 4px;
			box-shadow: 0px 0px 10px #d3bd3d;
		}

		100% {
			width: 1px;
			height: 1px;
			background: powderblue;
			box-shadow: 0px 0px 10px white;
		}
	}

	.star {
		z-index: -1;
		height: 1px;
		width: 1px;
		border-radius: 5px;
		box-shadow: 0px 0px 10px white;
		background: powderblue;
		position: absolute;
	}

	.star.pulse {
		z-index: 10;
	}

	.star.pulse.one {
		-webkit-animation: STAR 1s infinite;
		animation: STAR 1s infinite;
		-moz-animation: STAR 1s infinite;
	}

	.star.pulse.two {
		-webkit-animation: STAR 2s infinite;
		animation: STAR 2s infinite;
		-moz-animation: STAR 2s infinite;
	}

	.star.pulse.three {
		-webkit-animation: STAR 3s infinite;
		animation: STAR 3s infinite;
		-moz-animation: STAR 3s infinite;
	}

	.star.pulse.four {
		-webkit-animation: STAR 4s infinite;
		animation: STAR 4s infinite;
		-moz-animation: STAR 4s infinite;
	}

	.star.pulse.five {
		-webkit-animation: STAR 5s infinite;
		animation: STAR 5s infinite;
		-moz-animation: STAR 5s infinite;
	}

	@media screen and (max-width: 768px) {
		#language-buttons:not(.always-visible) {
			display: none;
		}
	}
</style>

<!-- HammerJS -->
<script is:inline src='https://s3-us-west-2.amazonaws.com/s.cdpn.io/204379/hammer.min.js'></script>

<script define:vars={{ lang: lang, slugEN: story.slugs.en, slugAR: story.slugs.ar, prevStorySlug, nextStorySlug }} is:inline>
	// Retrieve the read articles array from localStorage or initialize a new one
	let readArticles = JSON.parse(localStorage.getItem('readArticles')) || []

	// Keypress events for arrow left and arrow right to navigate to previous and next stories
	document.addEventListener('keydown', (e) => {
		if (e.key === 'ArrowLeft') {
			console.log('Arrow left')
			window.location = `/stories/${lang}/${prevStorySlug}`
		} else if (e.key === 'ArrowRight') {
			console.log('Arrow right')
			window.location = `/stories/${lang}/${nextStorySlug}`
		}
	})

	// Add event listeners for using Hammer JS to swipe left and right for changing stories
	const storyWrapper = document.getElementById('story-wrapper')
	if (storyWrapper && 'ontouchstart' in document.documentElement) {
		const mc = new Hammer(storyWrapper)

		// Handling swipe right - Go to previous story
		mc.on('swiperight', function () {
			window.location.href = `/stories/${lang}/${prevStorySlug}`
		})

		// Handling swipe left - Go to next story
		mc.on('swipeleft', function () {
			window.location.href = `/stories/${lang}/${nextStorySlug}`
		})
	}

	if (lang === 'en') {
		// Check if the current article's slug is not in the array
		if (!readArticles.some((article) => article.slug === slugEN)) {
			// Create an object with the current article's slug and the current timestamp
			const articleObject = {
				slug: slugEN,
				timestamp: new Date().toISOString(),
			}

			// Add the object to the read articles array
			readArticles.push(articleObject)

			// Save the updated array back to localStorage
			localStorage.setItem('readArticles', JSON.stringify(readArticles))
		}
	} else {
		// Check if the current article's slug is not in the array
		if (!readArticles.some((article) => article.slug === slugAR)) {
			// Create an object with the current article's slug and the current timestamp
			const articleObject = {
				slug: slugAR,
				timestamp: new Date().toISOString(),
			}

			// Add the object to the read articles array
			readArticles.push(articleObject)

			// Save the updated array back to localStorage
			localStorage.setItem('readArticles', JSON.stringify(readArticles))
		}
	}

	// Function to change href attribute of button id="overview--button--top" and button id="overview--button--bottom" depending on lang and currentView from localStorage
	function changeOverviewButtonHref() {
		const overviewButtonTop = document.getElementById('overview--button--top')
		const overviewButtonBottom = document.getElementById('overview--button--bottom')
		const currentView = localStorage.getItem('currentView')

		overviewButtonTop.href = `/${lang}/${currentView}`
		overviewButtonBottom.href = `/${lang}/${currentView}`
	}

	document.addEventListener('DOMContentLoaded', changeOverviewButtonHref)

	/* Adds twinkling stars */
	var NUMBER_OF_STARS = 100

	if (window.innerWidth <= 1024) {
		NUMBER_OF_STARS = 75
	}
	if (window.innerWidth <= 500) {
		NUMBER_OF_STARS = 25
	}

	var addPulse = function (element) {
		var pulseTime = Math.random() * 10000
		setTimeout(function () {
			// console.log('asdf')
			element.className += ' pulse'
		}, pulseTime)
	}

	var starContainer = document.querySelector('#stars')
	var starAnimationClassesArray = ['one', 'two', 'three', 'four', 'five']

	function createStars() {
		// console.log(`adding ${NUMBER_OF_STARS} stars`)

		for (var jess = 0; jess < NUMBER_OF_STARS; jess++) {
			setTimeout(() => {
				var aStar = document.createElement('div')
				var randomDuration = starAnimationClassesArray[Math.floor(Math.random() * starAnimationClassesArray.length)]
				aStar.className = 'star ' + randomDuration
				var windowWidth = window.innerWidth
				var windowHeight = window.innerHeight - 90
				var x = Math.random() * windowWidth
				aStar.style.left = x + 'px'
				starContainer.appendChild(aStar)
				var y = Math.random() * windowHeight
				aStar.style.top = y + 'px'
				addPulse(aStar)
			}, jess * 100)
		}
	}

	// Only create stars if the #stars container is empty
	if (starContainer.innerHTML === '') {
		createStars()
	}
</script>
