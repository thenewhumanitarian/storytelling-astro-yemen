---
import NavButtons from '../../../components/Buttons/NavButtons.astro'
import Layout from '../../../layouts/Layout.astro'
import stories from '../../../data/all_stories.json'

import Prose from '../../../components/Prose.astro'
import Title from '../../../components/Title.astro'
import AuthorSection from '../../../components/AuthorSection.astro'
import Attachments from '../../../components/Attachments.astro'
import Message from '../../../components/Message.astro'

export async function getStaticPaths() {
	return stories.map((story) => ({
		params: {
			slug: story.slugs.en,
		},
		props: {
			story,
		},
	}))
}

// Define props
const { story } = Astro.props

// Create array out of story.story.en.content by splitting the string wherever there is an \n
const contentArray = story.story.en.content.split('\n')

// Find the current story index based on the slug in the provided language
const currentIndex = stories.findIndex((s) => s.slugs.en === story.slugs.en) // Adjust 'en' as needed

// Calculate previous and next indexes with wrapping
const prevIndex = currentIndex - 1 < 0 ? stories.length - 1 : currentIndex - 1
const nextIndex = (currentIndex + 1) % stories.length

// Extract slugs for previous and next stories in the desired language
const prevStorySlug = stories[prevIndex].slugs.en // Adjust 'en' as needed for language
const nextStorySlug = stories[nextIndex].slugs.en // Adjust 'en' as needed for language
---

<Layout dark title='The Yemen Listening Project' header={true} switchViewButtons={false}>
	<div class='fixed top-0 left-0 w-screen h-screen -z-1 pointer-events-none' id='stars'></div>
	<div class='fixed top-0 left-0 w-screen h-screen -z-1 pointer-events-none' id='city'></div>
	<div class='w-full max-w-5xl mx-auto mt-2 sm:mt-12 lg:mt-16 mb-8 sm:mb-24 px-4' class='story-detail-page--wrapper' id='story-wrapper'>
		<div class='flex justify-center items-center'>
			<NavButtons button='previous' lang={'en'} href={`/stories/en/${prevStorySlug}`} />
			<NavButtons button='overview' lang={'en'} />
			<NavButtons button='next' lang={'en'} href={`/stories/en/${nextStorySlug}`} />
		</div>
		<Prose>
			<div class='flex flex-col gap-10'>
				<div class='flex flex-col lg:flex-row lg:gap-x-5'>
					<div class='w-1/2'>
						<Title>{story.story.en.title || `EN TITLE ID ${story.id} MISSING`}</Title>
					</div>
					<div class='w-1/2'>
						<AuthorSection
							name={`${story.personalInfo.en.name} ${story.personalInfo.en.surname}`}
							from={story.personalInfo.en.whereFrom}
							livingIn={story.personalInfo.en.livingIn}
							age={story.contact.age}
						/>
					</div>
				</div>
				<Attachments attachments={story.attachments} />
				<Message contentArray={contentArray} />
			</div>
		</Prose>
	</div>
</Layout>

<style is:global>
	body * {
		color: white;
	}

	#stars {
		z-index: -1;
		background: black;
	}

	#city {
		z-index: -1;
		background-image: url('https://assets.thenewhumanitarian.org/s3fs-public/styles/responsive_large/public/2023-06/night-sky-overlay_0.png.webp');
		background-size: 100%;
		background-position: top center;
		background-repeat: no-repeat;
	}

	.story-w a {
		color: white;
	}

	#story-wrapper * {
		text-align: left;
	}

	#story-wrapper code {
		display: none;
	}

	/* Classes and keyframe animations for stars */
	@keyframes STAR {
		0% {
			background: powderblue;
			height: 1px;
			width: 1px;
			box-shadow: 0px 0px 10px white;
		}

		10% {
			background: #b0e5de;
		}

		20% {
			background: #b0e5cc;
		}

		30% {
			background: #cce5b0;
		}

		40% {
			background: #dae5b0;
		}

		50% {
			background: #e5ddb0;
			width: 4px;
			height: 4px;
			box-shadow: 0px 0px 10px #d3bd3d;
		}

		100% {
			width: 1px;
			height: 1px;
			background: powderblue;
			box-shadow: 0px 0px 10px white;
		}
	}

	@keyframes pulse {
		0% {
			background: powderblue;
			height: 1px;
			width: 1px;
			box-shadow: 0px 0px 10px white;
		}

		10% {
			background: #b0e5de;
		}

		20% {
			background: #b0e5cc;
		}

		30% {
			background: #cce5b0;
		}

		40% {
			background: #dae5b0;
		}

		50% {
			background: #e5ddb0;
			width: 4px;
			height: 4px;
			box-shadow: 0px 0px 10px #d3bd3d;
		}

		100% {
			width: 1px;
			height: 1px;
			background: powderblue;
			box-shadow: 0px 0px 10px white;
		}
	}

	.star {
		z-index: -1;
		height: 1px;
		width: 1px;
		border-radius: 5px;
		box-shadow: 0px 0px 10px white;
		background: powderblue;
		position: absolute;
	}

	.star.pulse {
		z-index: 10;
	}

	.star.pulse.one {
		-webkit-animation: STAR 1s infinite;
		animation: STAR 1s infinite;
		-moz-animation: STAR 1s infinite;
	}

	.star.pulse.two {
		-webkit-animation: STAR 2s infinite;
		animation: STAR 2s infinite;
		-moz-animation: STAR 2s infinite;
	}

	.star.pulse.three {
		-webkit-animation: STAR 3s infinite;
		animation: STAR 3s infinite;
		-moz-animation: STAR 3s infinite;
	}

	.star.pulse.four {
		-webkit-animation: STAR 4s infinite;
		animation: STAR 4s infinite;
		-moz-animation: STAR 4s infinite;
	}

	.star.pulse.five {
		-webkit-animation: STAR 5s infinite;
		animation: STAR 5s infinite;
		-moz-animation: STAR 5s infinite;
	}
</style>

<script define:vars={{ slug: story.slugs.en }}>
	// Initial check to filter grid if necessary, same for list
	function filterGridBasedOnLocalStorage() {
		if (localStorage.getItem('showAll') === 'false') {
			document.getElementById('grid').classList.add('filter--read')
			document.getElementById('list').classList.add('filter--read')
		} else {
			document.getElementById('grid').classList.remove('filter--read')
			document.getElementById('list').classList.remove('filter--read')
		}
	}

	// Add article slug to array of read articles in lStorage

	// Retrieve the read articles array from localStorage or initialize a new one
	let readArticles = JSON.parse(localStorage.getItem('readArticles')) || []

	// Check if the current article's slug is not in the array
	if (!readArticles.some((article) => article.slug === slug)) {
		// Create an object with the current article's slug and the current timestamp
		const articleObject = {
			slug: slug,
			timestamp: new Date().toISOString(),
		}

		// Add the object to the read articles array
		readArticles.push(articleObject)

		// Save the updated array back to localStorage
		localStorage.setItem('readArticles', JSON.stringify(readArticles))
	}

	/* Adds twinkling stars */
	var NUMBER_OF_STARS = 200
	if (window.innerWidth <= 500) {
		NUMBER_OF_STARS = 50
	}

	var addPulse = function (element) {
		var pulseTime = Math.random() * 10000
		setTimeout(function () {
			// console.log('asdf')
			element.className += ' pulse'
		}, pulseTime)
	}

	var starContainer = document.querySelector('#stars')
	var starAnimationClassesArray = ['one', 'two', 'three', 'four', 'five']

	for (var jess = 0; jess < NUMBER_OF_STARS; jess++) {
		var aStar = document.createElement('div')
		var randomDuration = starAnimationClassesArray[Math.floor(Math.random() * starAnimationClassesArray.length)]
		aStar.className = 'star ' + randomDuration
		var windowWidth = window.innerWidth
		var windowHeight = window.innerHeight - 90
		var x = Math.random() * windowWidth
		aStar.style.left = x + 'px'
		starContainer.appendChild(aStar)
		var y = Math.random() * windowHeight
		aStar.style.top = y + 'px'
		addPulse(aStar)
	}
</script>
