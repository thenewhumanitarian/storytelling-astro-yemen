---
import Layout from '@layouts/Layout.astro'
import StoryWrapper from '@components/StoryWrapper.astro'
import SEO from '@components/SEO.astro'
import NavButtons from '@components/buttons/NavButtons.astro'
import stories from '@data/all_stories.json'

// Read path parameters for language and slug
const { path } = Astro.params

const pathParams = path?.toString().split('/')
const lang = pathParams?.[0] || 'en'

// Create all pages based on stories array, for both English and Arabic language
export async function getStaticPaths() {
	// Create a new array of tags that are found in the stories array
	const tags = stories.map((story) => story.tags).flat()
	const uniqueTags = [...new Set(tags)]

	// Loop through uniqueTags and check if the tag has multiple words, if so, replace the space with a hyphen
	uniqueTags.forEach((tag, index) => {
		if (tag.includes(' ')) {
			uniqueTags[index] = tag.replace(' ', '-')
		}
	})

	const allPathsEN = tags.map((tag) => ({
		params: {
			path: `en/${tag.toLocaleLowerCase()}`,
		},
		props: {
			allStories: stories,
		},
	}))

	const allPathsAR = tags.map((tag) => ({
		params: {
			path: `ar/${tag.toLocaleLowerCase()}`,
		},
		props: {
			allStories: stories,
		},
	}))

	const allPaths = [...allPathsEN, ...allPathsAR]

	return allPaths
}

const tags = stories.map((story) => story.tags).flat()
const uniqueTags = [...new Set(tags)]

// Define props
const { allStories } = Astro.props

// Assuming the current tag is the second parameter in your URL structure (after language)
const currentTag = pathParams?.[1]

// Filter stories that include the current tag (case-insensitive)
const filteredStories = allStories.filter((story) => story.tags.some((tag) => tag.toLowerCase() === currentTag.toLowerCase()))
---

<div class='pt-12'>
	<Layout dark title='The Yemen Listening Project' header={true} filterButtons={false} switchViewButtons={false} dir={lang === 'ar' ? 'rtl' : 'ltr'}>
		<SEO
			slot='seo'
			title={`The Yemen Listening Project | ${currentTag}`}
			description={lang === 'ar' ? '.حيثُ يتحدّث اليَمنيّون ويستمع العالمُ إليهم' : 'Where Yemenis talk, and the world listens.'}
		/>
		<StoryWrapper stories={filteredStories} view='tags' tags={uniqueTags}>
			<NavButtons
				button='overview'
				slot='top'
				lang={lang}
				classNames='-mt-4 text-white bg-transparent hover:bg-zinc-100 hover:text-burgundy'
				prefix={'←'}
			/>
		</StoryWrapper>
	</Layout>
</div>

<style>
	#filter-button {
		z-index: 9999;
	}
</style>

<script is:inline>
	function createStars(NUMBER_OF_STARS) {
		console.log(`Adding ${NUMBER_OF_STARS} stars`)

		const starContainer = document.querySelector('#stars')
		const starAnimationClassesArray = ['one', 'two', 'three', 'four', 'five']

		for (let jess = 0; jess < NUMBER_OF_STARS; jess++) {
			setTimeout(() => {
				const aStar = document.createElement('div')
				const randomDuration = starAnimationClassesArray[Math.floor(Math.random() * starAnimationClassesArray.length)]
				aStar.className = 'star ' + randomDuration
				const windowWidth = window.innerWidth
				const windowHeight = window.innerHeight - 90
				const x = Math.random() * windowWidth
				aStar.style.left = x + 'px'
				const y = Math.random() * windowHeight
				aStar.style.top = y + 'px'
				addPulse(aStar)
				starContainer.appendChild(aStar)
			}, jess * 100)
		}
	}

	function addPulse(element) {
		const pulseTime = Math.random() * 10000

		setTimeout(function () {
			element.classList.add('pulse')
		}, pulseTime)
	}

	window.addEventListener('DOMContentLoaded', () => {
		let NUMBER_OF_STARS = 75
		if (window.innerWidth <= 1024) {
			NUMBER_OF_STARS = 50
		}
		if (window.innerWidth <= 500) {
			NUMBER_OF_STARS = 15
		}

		const starContainer = document.querySelector('#stars')

		// Only create stars if the #stars container is empty
		if (!starContainer.hasChildNodes()) {
			createStars(NUMBER_OF_STARS)
		}
	})
</script>
