---
import Layout from '@layouts/Layout.astro'
import StoryWrapper from '@components/StoryWrapper.astro'
import SEO from '@components/SEO.astro'
import NavButtons from '@components/buttons/NavButtons.astro'
import stories from '@data/all_stories.json'

// Read path parameters for language and slug
const { path } = Astro.params

const pathParams = path?.toString().split('/')
const lang = pathParams?.[0] || 'en'

// Create all pages based on stories array, for both English and Arabic language
export async function getStaticPaths() {
	// Create a new array of tags that are found in the stories array
	const tags = stories.map((story) => story.tags).flat()
	const uniqueTags = [...new Set(tags)]

	// Loop through uniqueTags and check if the tag has multiple words, if so, replace the space with a hyphen
	uniqueTags.forEach((tag, index) => {
		if (tag.includes(' ')) {
			uniqueTags[index] = tag.replace(' ', '-')
		}
	})

	const allPathsEN = tags.map((tag) => ({
		params: {
			path: `en/${tag.toLocaleLowerCase()}`,
		},
		props: {
			allStories: stories,
		},
	}))

	const allPathsAR = tags.map((tag) => ({
		params: {
			path: `ar/${tag.toLocaleLowerCase()}`,
		},
		props: {
			allStories: stories,
		},
	}))

	const allPaths = [...allPathsEN, ...allPathsAR]

	return allPaths
}

const tags = stories.map((story) => story.tags).flat()
const uniqueTags = [...new Set(tags)]

// Define props
const { allStories } = Astro.props

// Assuming the current tag is the second parameter in your URL structure (after language)
const currentTag = pathParams?.[1]

// Filter stories that include the current tag (case-insensitive)
const filteredStories = allStories.filter((story) => story.tags.some((tag) => tag.toLowerCase() === currentTag.toLowerCase()))

const languageButtonClass = 'hidden sm:block'

// Construct languageButtons for /tags/en/ and /tags/ar/ including current tag name
const languageButtons = {
	ar: `/tags/ar/${currentTag}`,
	en: `/tags/en/${currentTag}`,
	class: languageButtonClass,
}
---

<div class='pt-12'>
	<Layout
		languageButtons={languageButtons}
		dark
		title='The Yemen Listening Project'
		header={true}
		filterButtons={false}
		switchViewButtons={false}
		dir={lang === 'ar' ? 'rtl' : 'ltr'}
	>
		<SEO slot='seo' title={`The Yemen Listening Project | ${currentTag}`} description={'Where Yemenis talk, and the world listens.'} />
		<StoryWrapper stories={filteredStories} view='tags' tags={uniqueTags}>
			<NavButtons
				button='overview'
				slot='top'
				lang={lang}
				classNames='-mt-6 text-white bg-burgundy hover:bg-zinc-100 px-3 py-2'
				id='overview--button--top'
			/>
		</StoryWrapper>
	</Layout>
</div>

<style>
	#filter-button {
		z-index: 9999;
	}
</style>

<script is:inline define:vars={{ lang }}>
	function createStars(NUMBER_OF_STARS) {
		console.log(`Adding ${NUMBER_OF_STARS} stars`)

		const starContainer = document.querySelector('#stars')
		const starAnimationClassesArray = ['one', 'two', 'three', 'four', 'five']

		for (let jess = 0; jess < NUMBER_OF_STARS; jess++) {
			setTimeout(() => {
				const aStar = document.createElement('div')
				const randomDuration = starAnimationClassesArray[Math.floor(Math.random() * starAnimationClassesArray.length)]
				aStar.className = 'star ' + randomDuration
				const windowWidth = window.innerWidth
				const windowHeight = window.innerHeight - 90
				const x = Math.random() * windowWidth
				aStar.style.left = x + 'px'
				const y = Math.random() * windowHeight
				aStar.style.top = y + 'px'
				addPulse(aStar)
				starContainer.appendChild(aStar)
			}, jess * 100)
		}
	}

	function addPulse(element) {
		const pulseTime = Math.random() * 10000

		setTimeout(function () {
			element.classList.add('pulse')
		}, pulseTime)
	}

	// Function to change href attribute of button id="overview--button--top" and button id="overview--button--bottom" depending on lang and currentView from localStorage
	function changeOverviewButtonHref() {
		const overviewButtonTop = document.getElementById('overview--button--top')
		const overviewButtonBottom = document.getElementById('overview--button--bottom')
		const currentView = localStorage.getItem('currentView')

		overviewButtonTop.href = `/${lang}/${currentView}`
    if (overviewButtonBottom) overviewButtonBottom.href = `/${lang}/${currentView}`
	}

	document.addEventListener('DOMContentLoaded', changeOverviewButtonHref)
	// document.addEventListener('astro:after-swap', changeOverviewButtonHref)

	class Star {
		constructor(container, delay) {
			this.container = container
			this.delay = delay // Delay before the star starts flickering
			this.init()
		}

		init() {
			this.element = document.createElement('div')
			this.element.className = 'star' // Base class for all stars
			this.move(true) // Initial position without visibility
			this.setSize() // Set random size
			setTimeout(() => {
				this.container.appendChild(this.element)
				this.startFlickering()
			}, this.delay)
		}

		move(makeInvisible = false) {
			const x = Math.random() * window.innerWidth
			const y = Math.random() * (window.innerHeight - 90)
			this.element.style.left = `${x}px`
			this.element.style.top = `${y}px`
			if (makeInvisible) {
				// Temporarily make the star invisible to change position
				this.element.style.opacity = '0'
			}
		}

		setSize() {
			// const size = Math.random() * 3 + 1 // Random size between 1px and 4px
      const size = Math.random() * 1.5 + 1
			this.element.style.width = `${size}px`
			this.element.style.height = `${size}px`
		}

		startFlickering() {
			// Make the star visible and start flickering
			this.element.style.opacity = '1'
			const flickerDuration = this.getRandomDuration()
			this.element.style.animation = `pulse ${flickerDuration}s infinite`

			// Schedule a move when the star is not visible
			const interval = flickerDuration * 1000 // Convert seconds to milliseconds
			setTimeout(() => {
				this.move() // This will execute when the star is "invisible" during animation
				this.startFlickering() // Restart flickering after moving
			}, interval)
		}

		getRandomDuration() {
			// Return a random duration between 1 to 5 seconds for the flicker effect
			return Math.random() * 4 + 1 // 1 to 5 seconds
		}
	}

	const NUMBER_OF_STARS = window.innerWidth <= 1024 ? (window.innerWidth <= 500 ? 10 : 25) : 50
	const starContainer = document.querySelector('#stars')

	if (starContainer.innerHTML === '') {
		for (let i = 0; i < NUMBER_OF_STARS; i++) {
			// Increment delay for each star to stagger the start of the flickering
			new Star(starContainer, i * 50)
		}
	}
</script>
