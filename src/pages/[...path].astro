---
import Layout from '@layouts/Layout.astro'
import StoryWrapper from '@components/StoryWrapper.astro'
import SEO from '@components/SEO.astro'
import stories from '@data/all_stories.json'

const { path } = Astro.params
const pathParams = path?.toString().split('/')
const view = pathParams?.[1] || undefined // Get grid or list from path
const lang = pathParams?.[0] || 'en' // Get language from path

export async function getStaticPaths() {
	const allPaths = [
		{
			params: {
				path: `en`,
			},
		},
		{
			params: {
				path: `en/list`,
			},
		},
		{
			params: {
				path: `en/grid`,
			},
		},
		{
			params: {
				path: `ar`,
			},
		},
		{
			params: {
				path: `ar/list`,
			},
		},
		{
			params: {
				path: `ar/grid`,
			},
		},
	]

	return allPaths
}

function shuffleArray(array) {
	for (let i = array.length - 1; i > 0; i--) {
		// Generate a random index
		const j = Math.floor(Math.random() * (i + 1))

		// Swap elements at indices i and j
		;[array[i], array[j]] = [array[j], array[i]]
	}
}

// Todo: Can this be done "once" per session perhaps? // Testing pipeline
shuffleArray(stories)

const isLegacy = view === 'legacy'
---

<Layout
	dark
	title='The Yemen Listening Project'
	header={true}
	filterButtons={isLegacy ? false : true}
	switchViewButtons={isLegacy ? false : true}
	languageButtons={isLegacy ? false : true}
>
	<SEO slot='seo' title={`The Yemen Listening Project`} description={'Where Yemenis talk, and the world listens.'} />
	<!-- <div class='fixed top-0 left-0 w-screen h-screen -z-1 pointer-events-none' id='city'></div> -->
	{view !== 'legacy' && <StoryWrapper stories={stories} view={view} lang={lang} />}
</Layout>

<script>
	// Prevent the default pull-to-refresh behavior when the user attempts to scroll up.
	let lastTouchY = 0
	const maybePreventPullToRefresh = (event) => {
		const firstTouchY = event.touches[0].clientY
		const bodyScrollTop = document.body.scrollTop || document.documentElement.scrollTop
		const documentScrollTop = document.documentElement.scrollTop

		if (bodyScrollTop === 0 && documentScrollTop === 0 && firstTouchY > lastTouchY) {
			// To prevent pull-to-refresh action, prevent the default behavior.
			event.preventDefault()
		}

		lastTouchY = firstTouchY
	}

	document.addEventListener(
		'touchstart',
		(event) => {
			if (event.touches.length !== 1) return

			lastTouchY = event.touches[0].clientY
			// Optional: Detect if the user is touching within certain elements that
			// should still allow scrolling.
		},
		{ passive: false },
	)

	document.addEventListener('touchmove', maybePreventPullToRefresh, { passive: false })
</script>

<script is:inline>
	/**
	 * BrowserDetector
	 *
	 * This util checks the current browser name and version and offers a
	 * convinient API to test for specific versions or browsers and whether
	 * the current visitor uses a supported browser or not.
	 */
	class BrowserDetector {
		constructor() {
			this.browser = {}
			this.unsupportedBrowsers = {
				Chrome: 70,
				Firefox: 60,
				IE: 10,
				Edge: 15,
				Opera: 50,
				Safari: 14,
			}

			this._detectBrowser()
		}

		/**
		 * Detects the current browser and its version number.
		 *
		 * @returns {Object} An object with keys for browser `name` and `version`.
		 */
		_detectBrowser() {
			this.browser = (function () {
				var ua = navigator.userAgent,
					tem,
					M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || []

				if (/trident/i.test(M[1])) {
					tem = /\brv[ :]+(\d+)/g.exec(ua) || []
					return { name: 'IE', version: tem[1] || '' }
				}

				if (M[1] === 'Chrome') {
					tem = ua.match(/\b(OPR|Edge)\/(\d+)/)
					if (tem != null) {
						return { name: tem[1].replace('OPR', 'Opera'), version: tem[2] }
					}
				}

				M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?']

				if ((tem = ua.match(/version\/(\d+)/i)) != null) {
					M.splice(1, 1, tem[1])
				}

				return { name: M[0], version: M[1] }
			})()
		}

		/**
		 * Checks if the current browser is Internet Explorer.
		 *
		 * @returns {Boolean}
		 */
		get isIE() {
			return this.browser.name === 'IE'
		}

		/**
		 * Checks if the current browser is Edge.
		 *
		 * @returns {Boolean}
		 */
		get isEdge() {
			return this.browser.name === 'Edge'
		}

		/**
		 * Checks if the current browser is from Microsoft (Edge
		 * or Internet Explorer).
		 *
		 * @returns {Boolean}
		 */
		get isMicrosoft() {
			return this.isIE || this.isEdge
		}

		/**
		 * Checks if the current browser is Firefox.
		 *
		 * @returns {Boolean}
		 */
		get isFirefox() {
			return this.browser.name === 'Firefox'
		}

		/**
		 * Checks if the current browser is Chrome.
		 *
		 * @returns {Boolean}
		 */
		get isChrome() {
			return this.browser.name === 'Chrome'
		}

		/**
		 * Checks if the current browser is Safari.
		 *
		 * @returns {Boolean}
		 */
		get isSafari() {
			return this.browser.name === 'Safari'
		}

		/**
		 * Checks if the current browser is from an Android device.
		 *
		 * @returns {Boolean}
		 */
		get isAndroid() {
			return /Android/i.test(navigator.userAgent)
		}

		/**
		 * Checks if the current browser is from a BlackBerry device.
		 *
		 * @returns {Boolean}
		 */
		get isBlackBerry() {
			return /BlackBerry/i.test(navigator.userAgent)
		}

		/**
		 * Checks if the current browser is from a Windows Mobile device.
		 *
		 * @returns {Boolean}
		 */
		get isWindowsMobile() {
			return /IEMobile/i.test(navigator.userAgent)
		}

		/**
		 * Checks if the current browser is Mobile Safari.
		 *
		 * @returns {Boolean}
		 */
		get isIOS() {
			return /iPhone|iPad|iPod/i.test(navigator.userAgent)
		}

		/**
		 * Checks if the current browser is a mobile browser.
		 *
		 * @returns {Boolean}
		 */
		get isMobile() {
			return this.isAndroid || this.isBlackBerry || this.isWindowsMobile || this.isIOS
		}

		/**
		 * Checks if the current browser is supported by
		 * our environment.
		 *
		 * @returns {Boolean}
		 */
		isSupported() {
			if (this.unsupportedBrowsers.hasOwnProperty(this.browser.name)) {
				if (+this.browser.version > this.unsupportedBrowsers[this.browser.name]) {
					return true
				}
			}

			return false
		}
	}

  const browser = new BrowserDetector()

  const browserIsSupported = browser.isSupported() || !browser.isIE

  if (!browserIsSupported) {
    alert('Your browser is not supported. Please use a modern browser.')
  }
</script>
