---
// import HeaderLogo from './HeaderLogoSimple.astro'
import Pergament from '@components/Pergament.astro'
import Logo from '@components/header/Logo.astro'
import LanguageButtons from '@components/buttons/LanguageButtons.astro'
import { translations } from '@data/translations'

import Intro from './content/intro.astro'
import About from './content/about.astro'
import Credits from './content/credits.astro'

import static_pages from '@data/static_pages.json'

let { lang } = Astro.params

if (!lang) {
	// Read path parameters for language and slug
	const { path } = Astro.params

	const pathParams = path?.toString().split('/')
	lang = pathParams?.[0] || 'en'
}

const navButtonClasses =
	'text-white bg-black px-3 py-1 border-white border sm:border-2 font-semibold text-base hover:text-black transition-colors cursor-pointer hover:bg-white'
// hover:bg-white hover:text-black font-bold border-2 cursor-pointer font-normal px-3 py-1 text-white menu-close-button menu-close-button--text transition-colors
---

<div id='menu-overlay' class='flex flex-col min-h-screen bg-black p-5 sm:p-8 gap-y-5 sm:gap-y-8' transition:persist>
	<!-- City and stars -->
	<div class='fixed top-0 left-0 w-screen h-screen -z-1 pointer-events-none' id='stars' transition:persist></div>
	<div id='overlay-city' class='top-0 left-0 fixed w-full h-full z-1'></div>

	<!-- Menu section -->
	<div class='flex flex-col items-center justify-center gap-y-5 pt-0' id='menu-overlay--nav-wrapper'>
		<!-- Logo here -->
		<div class='w-60 sm:w-64 md:w-72 h-auto pb-3 sm:pb-4'>
			<Logo id='overlay-logo' />
		</div>

		<LanguageButtons alwaysVisible={true} classNames='intro__language--button' links={{ en: '/en/grid', ar: '/ar/grid' }} />

		<!-- Menu content here -->
		<div class='flex flex-col items-center justify-center w-full z-50 pt-2 sm:pt-0' id='menu-overlay--nav'>
			<nav class='flex flex-row text-right items-center sm:items-center gap-x-3 sm:gap-x-3'>
				{
					static_pages.links[lang].map((page, i) => {
						const { className, text } = page
						return (
							<span data-content={page.id} class={`nav-button ${navButtonClasses} ${className}`} data-astro-reload>
								{text}
							</span>
						)
					})
				}
			</nav>
		</div>
	</div>

	<!-- Body content -->
	<div
		class='max-h-[48vh] sm:max-h-none overflow-y-auto border-2 bg-zinc-900 max-w-4xl mx-auto w-full z-50'
		id='scrollable-container'
		style='height: -webkit-fill-available;'
	>
		<section class='flex flex-col cursor-default items-center justify-center'>
			<!-- Body content here -->
			<Pergament lang={lang || 'en'} classNames='p-4 text-black h-full rounded-xs border-none w-full'>
				<div class='content-container intro' id='intro'>
					<Intro lang={lang} />
				</div>
				<div class='content-container about' id='about'>
					<About lang={lang} />
				</div>
				<div class='content-container credits' id='credits'>
					<Credits lang={lang} />
				</div>
			</Pergament>
		</section>
	</div>

	<!-- Close button -->
	<div class='block sm:hidden self-center mt-1' id='close-button--text'>
		<div
			class='text-xs mt-1 hover:bg-white hover:text-black bg-black border-2 cursor-pointer font-semibold px-3 py-1 text-white menu-close-button menu-close-button--text transition-colors'
		>
			{translations.close[lang]}
		</div>
	</div>

	{
		lang === 'ar' ? (
			<div class='absolute -top-0 sm:top-1 left-5 sm:left-7 w-5 h-5 sm:w-8 sm:h-8 cursor-pointer text-white hover:text-burgundy transition-colors menu-close-button z-50'>
				<svg class='fill-current' width='100%' height='90' viewBox='0 0 90 90' fill='none' xmlns='http://www.w3.org/2000/svg'>
					<path
						class='fill-current'
						fill-rule='evenodd'
						clip-rule='evenodd'
						d='M1.84937 1.84937C4.02123 -0.317302 7.53683 -0.317302 9.7087 1.84937L44.6674 36.8134L79.626 1.84937C81.7979 -0.317302 85.3135 -0.317302 87.4854 1.84937C89.652 4.02123 89.652 7.53683 87.4854 9.7087L52.5214 44.6674L87.4854 79.626C89.652 81.7979 89.652 85.3135 87.4854 87.4854C85.3135 89.652 81.7979 89.652 79.626 87.4854L44.6674 52.5214L9.7087 87.4854C7.53683 89.652 4.02123 89.652 1.84937 87.4854C-0.317302 85.3135 -0.317302 81.7979 1.84937 79.626L36.8134 44.6674L1.84937 9.7087C-0.317302 7.53683 -0.317302 4.02123 1.84937 1.84937Z'
					/>
				</svg>
			</div>
		) : (
			<div class='absolute -top-0 sm:top-1 right-5 sm:right-7 w-5 h-5 sm:w-8 sm:h-8 cursor-pointer text-white hover:text-burgundy transition-colors menu-close-button z-[9999]'>
				<svg class='fill-current' width='100%' height='90' viewBox='0 0 90 90' fill='none' xmlns='http://www.w3.org/2000/svg'>
					<path
						class='fill-current'
						fill-rule='evenodd'
						clip-rule='evenodd'
						d='M1.84937 1.84937C4.02123 -0.317302 7.53683 -0.317302 9.7087 1.84937L44.6674 36.8134L79.626 1.84937C81.7979 -0.317302 85.3135 -0.317302 87.4854 1.84937C89.652 4.02123 89.652 7.53683 87.4854 9.7087L52.5214 44.6674L87.4854 79.626C89.652 81.7979 89.652 85.3135 87.4854 87.4854C85.3135 89.652 81.7979 89.652 79.626 87.4854L44.6674 52.5214L9.7087 87.4854C7.53683 89.652 4.02123 89.652 1.84937 87.4854C-0.317302 85.3135 -0.317302 81.7979 1.84937 79.626L36.8134 44.6674L1.84937 9.7087C-0.317302 7.53683 -0.317302 4.02123 1.84937 1.84937Z'
					/>
				</svg>
			</div>
		)
	}
</div>

<style>
	#menu-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100vh;
		background-color: rgba(0, 0, 0, 0.85);
		visibility: hidden;
		z-index: 8888;
		transition: opacity 0.5s;
		opacity: 0;
		/* background-color: lightsalmon; */
	}
	.menu-close-button {
		pointer-events: auto;
	}

	.menu-close-button--text {
		border: 1px solid white;
	}

	.menu-close-button:active {
		pointer-events: none;
	}

	#menu-overlay {
		z-index: 9999;
	}

  #menu-close-button {
    z-index: 9999;
  }

	.nav-button.active {
		background-color: white;
		color: black;
	}
</style>

<script is:inline>
	function initOverlay(event) {
		// Select all elements with the class 'nav-button'
		const navButtons = document.querySelectorAll('.nav-button')

		// Function to remove 'active' class from all nav buttons
		function removeAllActiveClasses() {
			navButtons.forEach((button) => {
				button.classList.remove('active')
			})
		}

		function hideAllContainers() {
			// Select all .content-container elements and hide them
			const contentContainers = document.querySelectorAll('.content-container')
			contentContainers.forEach((container) => {
				// @ts-ignore
				container.style.display = 'none'
			})
		}

		// Function to handle click events on nav buttons
		function handleNavButtonClick(event) {
			// console.log(event.target)

			// Prevent default action
			event.preventDefault()

			// Remove 'active' class from all nav buttons first
			removeAllActiveClasses()

			// Add 'active' class to the clicked nav button
			event.currentTarget.classList.add('active')

			// Get the 'data-content' attribute of the clicked element
			const content = event.currentTarget.getAttribute('data-content')

			// Optionally, log the saved value to confirm it's working
			// console.log('Active Intro Slide set to:', content)

			// Select element with id === content and show it
			hideAllContainers()
			const contentContainer = document.getElementById(content)
			contentContainer.style.display = 'block'

			// Scroll the #pergament container to the top
			const pergamentContainer = document.querySelector('#pergament')
			if (pergamentContainer) {
				pergamentContainer.scrollTop = 0
			}
		}

		// Function to activate the nav button based on localStorage or default to first button
		function activateStoredNavButton() {
			// const activeIntroSlide = localStorage.getItem('activeIntroSlide')
			const activeIntroSlide = 'intro'
			if (activeIntroSlide) {
				let found = false
				navButtons.forEach((button) => {
					if (button.getAttribute('data-content') === activeIntroSlide) {
						button.classList.add('active')
						found = true
					}
				})
				// If no matching button is found, activate the first button
				if (!found && navButtons.length > 0) {
					navButtons[0].classList.add('active')
				}
			} else {
				// If no value is set in localStorage, apply the 'active' class to the first button
				if (navButtons.length > 0) {
					navButtons[0].classList.add('active')
				}
			}
		}

		// Attach the event listener to each nav button and activate the stored nav button
		navButtons.forEach((button) => {
			button.addEventListener('click', handleNavButtonClick)
		})

		// Check and activate the nav button as per localStorage when the page loads
		activateStoredNavButton()

		// Select all .content-container elements and hide them
		hideAllContainers()

		// Find all buttons with .language--button class and add event listener to each
		const languageButtons = document.querySelectorAll('.intro__language--button')
		languageButtons.forEach((button) => {
			button.addEventListener('click', (event) => {
				localStorage.setItem('hideIntro', 'false')
			})
		})

		document.getElementById('intro').style.display = 'block'
	}

	document.addEventListener('DOMContentLoaded', (event) => {
		initOverlay(event)
	})

	/**
	 * STARS
	 */

	class Star {
		constructor(container, delay) {
			this.container = container
			this.delay = delay // Delay before the star starts flickering
			this.init()
		}

		init() {
			this.element = document.createElement('div')
			this.element.className = 'star' // Base class for all stars
			this.move(true) // Initial position without visibility
			this.setSize() // Set random size
			setTimeout(() => {
				this.container.appendChild(this.element)
				this.startFlickering()
			}, this.delay)
		}

		move(makeInvisible = false) {
			const x = Math.random() * window.innerWidth
			const y = Math.random() * (window.innerHeight - 90)
			this.element.style.left = `${x}px`
			this.element.style.top = `${y}px`
			if (makeInvisible) {
				// Temporarily make the star invisible to change position
				this.element.style.opacity = '0'
			}
		}

		setSize() {
			const size = Math.random() * 3 + 1 // Random size between 1px and 4px
			this.element.style.width = `${size}px`
			this.element.style.height = `${size}px`
		}

		startFlickering() {
			// Make the star visible and start flickering
			this.element.style.opacity = '1'
			const flickerDuration = this.getRandomDuration()
			this.element.style.animation = `pulse ${flickerDuration}s infinite`

			// Schedule a move when the star is not visible
			const interval = flickerDuration * 1000 // Convert seconds to milliseconds
			setTimeout(() => {
				this.move() // This will execute when the star is "invisible" during animation
				this.startFlickering() // Restart flickering after moving
			}, interval)
		}

		getRandomDuration() {
			// Return a random duration between 1 to 5 seconds for the flicker effect
			return Math.random() * 4 + 1 // 1 to 5 seconds
		}
	}

	const NUMBER_OF_STARS = window.innerWidth <= 1024 ? (window.innerWidth <= 500 ? 15 : 25) : 40
	const starContainer = document.querySelector('#stars')

	if (starContainer.innerHTML === '') {
		for (let i = 0; i < NUMBER_OF_STARS; i++) {
			// Increment delay for each star to stagger the start of the flickering
			new Star(starContainer, i * 50)
		}
	}
</script>
