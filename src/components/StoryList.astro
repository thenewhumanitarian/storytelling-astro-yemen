---
const { stories, id } = Astro.props

import StoryListItem from '@components/StoryListItem.astro'

let { lang } = Astro.params

if (!lang) {
	// Read path parameters for language and slug
	const { path } = Astro.params

	const pathParams = path?.toString().split('/')
	lang = pathParams?.[0] || 'en'
}

// Sort stories array
function shuffleArray(array) {
	for (let i = array.length - 1; i > 0; i--) {
		const j = Math.floor(Math.random() * (i + 1))
		;[array[i], array[j]] = [array[j], array[i]]
	}
}

function sortStoriesWithHighlights(stories) {
	const highlightedStories = stories.filter((story) => story.highlighted)
	const otherStories = stories.filter((story) => !story.highlighted)

	// Shuffle both arrays
	shuffleArray(highlightedStories)
	shuffleArray(otherStories)

	// Ensure there are always at least three items between highlighted stories
	const resultArray = []
	let otherIndex = 0

	highlightedStories.forEach((highlightedStory, index) => {
		// Add one highlighted story
		resultArray.push(highlightedStory)

		// Add three (or more if available) other stories
		for (let i = 0; i < 3; i++) {
			if (otherStories[otherIndex]) {
				resultArray.push(otherStories[otherIndex])
				otherIndex++
			}
		}
	})

	// Add any remaining other stories to the end of the result array
	resultArray.push(...otherStories.slice(otherIndex))

	return resultArray
}

const shuffledStories = sortStoriesWithHighlights(stories)
---

<div class='hidden flex-row gap-y-0 sm:gap-y-2 md:gap-y-3 max-w-2xl lg:max-w-5xl mx-auto' id={id || 'list'}>
	{
		shuffledStories.map((story) => {
			return <StoryListItem story={story} />
		})
	}
</div>

<style is:global>
	#tags,
	#list {
		display: flex !important;
		flex-direction: column;
	}

	#tags.filter--read > a:not([data-lastread='never']) > div div,
	#list.filter--read > a:not([data-lastread='never']) > div div {
		opacity: 0.2;
	}
</style>

<script>
	document.addEventListener('astro:after-swap', () => {
		window.scrollTo(0, 0)
	})
</script>
