---
const { stories } = Astro.props
---

<div class={`stories-container--grid`} id='stories-container--grid'>
	<div id='grid' class='grid'></div>
</div>
<div class={`stories-container--list mt-40`} id='stories-container--list'>
	<div class='list' id='list'>
	{
		stories.map((story, i) => {
			return (
				<a href={`/stories/${story.slug}`} class={`flex justify-start items-center gap-x-3 story-item p-3 sm:p-5 ${i % 2 === 0 ? 'bg-gray-800' : ''}`} data-slug={story.slug}>
					{story.image.fileName && <img src={`/downloaded_images/thumbnails/${story.image.fileName}`} alt={story.title} class='w-14 h-14' /> }
					<h3 class='story-item--title lang--ar text-white m-0'>{story.titles['ar']}</h3>
					<h3 class='story-item--title lang--en text-white m-0'>{story.titles['en']}</h3>
				</a>
				// <div class={`story-item p-5 ${i % 2 === 0 ? 'bg-gray-800' : ''}`} data-slug={story.slug}>
				// 	<h3 class='story-item--title lang--ar text-white m-0'>{story.titles['ar']}</h3>
				// 	<h3 class='story-item--title lang--en text-white m-0'>{story.titles['en']}</h3>
				// </div>
			)
		})
	}
	</div>
</div>

<!-- Library to help moving around the grid -->
<script src='https://cdnjs.cloudflare.com/ajax/libs/animejs/2.2.0/anime.min.js' is:inline></script>

<script async define:vars={{ stories }} is:inline>
// Initial check to filter grid if necessary, same for list
function filterGridBasedOnLocalStorage() {
	if (localStorage.getItem('showAll') === 'false') {
		document.getElementById('grid').classList.add('filter--read')
		document.getElementById('list').classList.add('filter--read')
	} else {
		document.getElementById('grid').classList.remove('filter--read')
		document.getElementById('list').classList.remove('filter--read')
	}
}

function truncateWithEllipses(text, maxLength) {
	if (text.length <= maxLength) {
		return text
	}
	return text.substr(0, maxLength - 3) + '...' // Subtract 3 for the length of the ellipses
}

filterGridBasedOnLocalStorage()

// Window load event
window.addEventListener('pageshow', function () {
	filterGridBasedOnLocalStorage()

	// Get read articles or default to an empty array
	let readArticles = JSON.parse(localStorage.getItem('readArticles')) || []

	// Update grid elements based on read articles
	document.querySelectorAll('.story-item').forEach((element) => {
		const slug = element.getAttribute('data-slug')
		const readArticle = readArticles.find((article) => article.slug === slug)

		// Update element based on whether the article has been read before
		if (readArticle) {
			element.setAttribute('data-lastread', readArticle.timestamp)
			// element.style.opacity = 0.2
		} else {
			element.setAttribute('data-lastread', 'never')
		}
	})

	const grid = optimalGridDimensions()
	Infinite.setGrid(grid.cols, grid.rows)
})

/* Grid magic */
class GridItem {
	constructor(index = 0) {
		// Create anchor element for grid item as a container
		this.item = document.createElement('a')

		// Variable to check if currently loading image
		this.currentLoadingImage = null

		// Create h2 element for the English title
		this.titleEnglish = document.createElement('h2')
		this.item.append(this.titleEnglish)

		// Create h2 element for the Arabic title
		this.titleArabic = document.createElement('h2')
		this.item.append(this.titleArabic)

		// Set index and add classes
		this.index = index
		this.item.classList.add('story-item')
		this.setNewCard()
	}

	setIndex(index) {
		this.index = index
		this.setNewCard()
	}

	isImageLoaded() {
		return this.item.querySelector('img') !== null
	}

	setNewCard() {
		// Define vars to be used later
		let story = stories[this.index % stories.length]

		// Add both language titles
		const titles = story.titles

		// Determine the new image URL
		let newImageUrl = `/downloaded_images/thumbnails/${story.image.fileName}`

		// Check if there's already an <img> element inside the grid-item
		let currentImageElement = this.item.querySelector('img')

		// If there's an image and its source is the same as the new image, return early
		if (currentImageElement && currentImageElement.src === newImageUrl) {
			return
		}

		// Remove the previous image if it's different or if there wasn't any image
		if (currentImageElement) {
			currentImageElement.remove()
		}

		// Set the background to the placeholder
		this.item.style.backgroundImage = `url('/downloaded_images/placeholders/${story.image.fileName}')`

		// Check for initial load to decide between lazy loading or direct image set
		if (this.initialLoad) {
			this.lazyLoadImage(story.image.fileName, story.title)
		} else {
			const imageElement = document.createElement('img')
			imageElement.src = newImageUrl
			imageElement.classList.add('full-image')
			imageElement.classList.add('loaded') // Immediately show it, since we're not lazy loading now
			this.item.appendChild(imageElement)
		}

		// Check if article was read before and write date of last read if that's the case
		let readArticles = JSON.parse(localStorage.getItem('readArticles')) || []
		let readArticle = readArticles.find((article) => article.slug === story.slug)
		if (readArticle) {
			// If the current article has been read before, set the data-lastread attribute with the timestamp
			this.item.setAttribute('data-lastread', readArticle.timestamp)
		} else {
			// If the current article has not been read, set data-lastread to a default value or omit this part altogether
			this.item.setAttribute('data-lastread', 'never')
		}

		// Set English title for the grid item
		this.titleEnglish.textContent = truncateWithEllipses(titles['en'], 100)

		// Set title classes and add text for English title
		this.titleEnglish.classList.add('story-item--title')
		this.titleEnglish.classList.add('lang--en')
		this.titleEnglish.classList.add('box-decoration-clone')
		this.titleEnglish.classList.add('px-2')
		this.titleEnglish.classList.add('sm:leading-7')
		this.titleEnglish.classList.add('text-white')
		this.titleEnglish.classList.add('font-normal')
		this.titleEnglish.classList.add('bg-black')
		this.titleEnglish.classList.add('pt-0')
		this.titleEnglish.classList.add('sm:pt-8')
		this.titleEnglish.classList.add('pointer-events-none')
		// this.titleEnglish.classList.add('sm:pointer-events-auto')
		this.titleEnglish.setAttribute('dir', 'ltr')
		// this.titleEnglish.classList.add('inline')

		// Set Arabic title for the grid item
		this.titleArabic.textContent = truncateWithEllipses(titles['ar'], 100)

		// Set title classes and add text for Arabic title
		this.titleArabic.classList.add('story-item--title')
		this.titleArabic.classList.add('lang--ar')
		this.titleArabic.classList.add('box-decoration-clone')
		this.titleArabic.classList.add('px-2')
		this.titleArabic.classList.add('sm:leading-7')
		this.titleArabic.classList.add('text-white')
		this.titleArabic.classList.add('font-normal')
		this.titleArabic.classList.add('bg-black')
		this.titleArabic.classList.add('pt-0')
		this.titleArabic.classList.add('sm:pt-8')
		this.titleArabic.classList.add('pointer-events-none')
		// this.titleArabic.classList.add('sm:pointer-events-auto')
		this.titleArabic.setAttribute('dir', 'rtl')
		// this.titleArabic.classList.add('inline')

		// Add data-bg attribute to the element to load image later
		this.item.setAttribute('data-bg', `/downloaded_images/thumbnails/${story.image.fileName}`)

		// Lazy load the image to replace the blurry placeholder
		if (!this.isImageLoaded()) {
			this.lazyLoadImage(story.image.fileName, story.title)
		}

		// Add href to this grid item using slug
		this.item.setAttribute('href', `/stories/${story.slug}`)
	}

	// Method to lazy-load the preview images
	lazyLoadImage(fileName, altText) {
		// Create new image
		const img = new Image()

		// Start loading the image
		img.src = `/downloaded_images/thumbnails/${fileName}`

		// Store reference to the image in the class
		this.currentLoadingImage = img

		img.onload = () => {
			if (this.currentLoadingImage === img) {
				const imageElement = document.createElement('img')
				imageElement.src = img.src
				imageElement.classList.add('full-image')
				this.item.appendChild(imageElement)
				// This ensures the next repaint will have the image added but not visible
				requestAnimationFrame(() => {
					imageElement.classList.add('loaded')
				})
				if (altText) {
					// Add altText to image
					imageElement.setAttribute('alt', altText)
				}
			}
		}

		img.onerror = () => {
			console.error('Failed to load image:', fileName)
		}

		// Check if it was loaded immediately
		if (img.complete || img.readyState === 4) {
			wasLoadedFromCache = true
		}
	}
}

class Drag {
	constructor(ele, handleDrag) {
		this.dragging = false
		this.lastX = null
		this.lastY = null
		this.handleDrag = handleDrag
		this.touchStartTime = 0

		ele.addEventListener('click', this.onClick.bind(this), false)

		ele.addEventListener('touchstart', this.onStart.bind(this), false)
		ele.addEventListener('touchmove', this.onMove.bind(this), false)
		ele.addEventListener('touchend', this.onEnd.bind(this), false)

		ele.addEventListener('mousedown', this.onStart.bind(this))
		ele.addEventListener('mousemove', this.onMove.bind(this))
		ele.addEventListener('mouseup', this.onEnd.bind(this))
		// ele.addEventListener('mouseuot', this.onEnd.bind(this))
	}

	onClick(ev) {
		// Check if #grid is hidden and if yes return
		if (document.getElementById('grid').style.display === 'none') return
		ev = ev.type == 'touchstart' ? ev.touches[0] : ev

		if (this.dragging) {
			ev.preventDefault()
		}
	}

	onStart(ev) {
		if (document.getElementById('grid').style.display === 'none') return
		this.touchStartTime = Date.now()
		ev.preventDefault()

		// Disable hover classes temporarily
		document.body.classList.add('is-dragging')

		ev = ev.type == 'touchstart' ? ev.touches[0] : ev

		this.dragging = true

		this.lastX = ev.clientX
		this.lastY = ev.clientY
	}

	onMove(ev) {
		if (!this.dragging) return
		if (document.getElementById('grid').style.display === 'none') return
		ev = ev.type == 'touchmove' ? ev.touches[0] : ev

		let xDelta = ev.clientX - this.lastX
		let yDelta = ev.clientY - this.lastY
		let vel = Math.abs(xDelta * yDelta)
		if (vel > 50) {
			// let v = { x: xDelta * 0.5, y: yDelta * 0.5 } // Make it more snappy
			let v = { x: xDelta * 0, y: yDelta * 0 }
			if (this.anime) this.anime.pause()
			this.anime = anime({
				targets: v,
				x: 0,
				y: 0,
				update: () => {
					this.handleDrag(v.x, v.y)
				},
			})
		}

		this.handleDrag(xDelta, yDelta)
		this.lastX = ev.clientX
		this.lastY = ev.clientY
	}

	onEnd(ev) {
		this.dragging = false

		document.body.classList.remove('is-dragging')

		// Calculate the duration of the tap
		const touchDuration = Date.now() - this.touchStartTime
		// console.log(touchDuration)

		// Check duration and act accordingly
		if (touchDuration < 100) {
			// This checks if the touch lasted less than 500ms
			// This was a short tap
			if (ev.target.tagName.toLowerCase() === 'a') {
				const href = ev.target.getAttribute('href')
				if (href) {
					window.location = href
				}
			} else {
				return
			}
		}
	}
}
class InfiniteGrid {
	constructor(nCol = 2, nRow = 2) {
		this.grid = document.getElementById('grid')
		this.container = document.getElementById('stories-container--grid')
		this.Drag = new Drag(this.container, this.onDrag.bind(this))
		this.offsetX = 0
		this.offsetY = 0

		// Overshoot items
		this.items = []
		this.setGrid(nCol, nRow)
	}

	onDrag(xDelta, yDelta) {
		this.offsetX += xDelta
		this.offsetY += yDelta

		// Move the grid back by 1 item whenever it goes over 1/2 of an item
		// Making the movement invisible
		const itemWidth = 100 / this.cols
		const itemHeight = 100 / this.rows
		const pixelWidth = (itemWidth * window.innerWidth) / 100
		const pixelHeight = (itemHeight * window.innerHeight) / 100
		let jumpX = null
		let jumpY = null

		if (Math.abs(this.offsetX) > pixelWidth / 2) {
			this.offsetX -= pixelWidth * Math.sign(this.offsetX)
			jumpX = Math.sign(this.offsetX)
		}

		if (Math.abs(this.offsetY) > pixelHeight / 2) {
			this.offsetY -= pixelHeight * Math.sign(this.offsetY)
			jumpY = Math.sign(this.offsetY)
		}

		// console.log(this.rows, this.cols, jumpY)

		if (jumpX || jumpY) {
			this.items.forEach((item) => {
				if (jumpX) item.setIndex(this.shiftIndex(item.index + jumpX))
				if (jumpY) item.setIndex(this.shiftIndex(item.index + jumpY * (this.cols + 2)))
			})
		}

		this.grid.style.transform = `translate3d(${this.offsetX}px,${this.offsetY}px,0)`
	}

	shiftIndex(index) {
		if (index < 0) {
			index = this.items.length + index
		}

		index = index % this.items.length

		return index
	}

	async setGrid(nCol = 2, nRow = 2) {
		if (nCol === this.cols && nRow === this.rows) return

		// Overshoot items
		const cols = nCol + 2
		const rows = nRow + 2

		// Add space for 2 more rows and columns using the current col/row size
		this.container.style.width = `${100 + (100 / nCol) * 2}vw`
		this.container.style.height = `${100 + (100 / nRow) * 2}vh`

		// Move the grid back by 1 col and row
		this.container.style.transform = `translate(${-100 / nCol}vw, ${-100 / nRow}vh)`

		// Do everything else taking into account the overshoot items
		this.grid.style.gridTemplateColumns = Array.from({ length: cols }, () => '1fr').join(' ')
		this.grid.style.gridTemplateRows = Array.from({ length: rows }, () => '1fr').join(' ')

		const nItems = cols * rows
		this.cols = nCol
		this.rows = nRow

		while (nItems < this.items.length) {
			this.grid.removeChild(this.grid.children[this.items.length - 1])
			this.items = this.items.slice(0, this.items.length - 1)
		}

		while (nItems > this.items.length) {
			const item = new GridItem(this.items.length)
			this.items = this.items.concat(item)
			this.grid.append(item.item)
		}

		this.items.forEach((item, index) => {
			item.setIndex(index)
		})
	}
}

const grid = optimalGridDimensions()
const Infinite = new InfiniteGrid(grid.cols, grid.rows)

// Re-calculate when user resizes browser
window.addEventListener('resize', () => {
	const grid = optimalGridDimensions()
	Infinite.setGrid(grid.cols, grid.rows)
})

function optimalGridDimensions(minSide = window.innerWidth > 500 ? 200 : 130) {
	const width = window.innerWidth
	const height = window.innerHeight

	const maxCols = Math.floor(width / minSide)
	const maxRows = Math.floor(height / minSide)

	let bestCols = 1
	let bestRows = maxRows
	let closestToSquare = Infinity

	for (let cols = 1; cols <= maxCols; cols++) {
		const cellWidth = width / cols
		const rowsForSquare = Math.floor(height / cellWidth)

		if (rowsForSquare > 0 && cellWidth >= minSide) {
			const aspectRatioDiff = Math.abs(cellWidth * cols - (width * rowsForSquare) / height)

			if (aspectRatioDiff < closestToSquare) {
				closestToSquare = aspectRatioDiff
				bestCols = cols
				bestRows = rowsForSquare
			}
		}
	}

	return {
		cols: bestCols,
		rows: bestRows,
	}
}
</script>

<style is:global>
	body.is-dragging .story-item h2,
	body.is-dragging .story-item {
		cursor: move;
	}

	header {
		position: fixed;
		z-index: 9999 !important;
	}

	/* Grid view styles */

	.stories-container--grid {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100vh;
		z-index: 5555;
		overflow: hidden;
	}

	.stories-container--grid span {
		position: fixed;
		z-index: 5000;
		top: 0;
		left: 0;
		width: 50px;
		height: 50px;
		background: white;
	}

	.grid {
		display: grid;
		width: 100%;
		height: 100%;
		gap: 0;
		overflow: hidden;
	}

	#grid .story-item {
		position: relative;
		background: black;
		background-size: cover;
		image-rendering: pixelated;
		background-position: center center;
		user-select: none;
		overflow: hidden;
		will-change: all;
		transition: transform 0.25s ease-in-out;
		transform: scale(1);
	}

	#grid .story-item img {
		position: absolute;
		top: 0;
		left: 0;
		z-index: -1;
		width: 100%;
		height: 100%;
		object-fit: cover;
		pointer-events: none;
	}

	.full-image {
		opacity: 0;
		transition: opacity 0.5s ease;
	}

	.full-image.loaded {
		opacity: 1;
	}

	#grid.filter--read .story-item:not([data-lastread='never']) {
		opacity: 0.2;
		/* transition: opacity 1s ease-out; */
	}

	#grid.filter--read .story-item:not([data-lastread='never']),
	#grid.filter--read .story-item:not([data-lastread='never']) * {
		pointer-events: none;
	}

	#grid.filter--read .story-item:not([data-lastread='never']):hover,
	#grid.filter--read .story-item:not([data-lastread='never']):hover * {
		cursor: move;
	}

	.story-item--title {
		margin: 0;
		box-decoration-break: clone;
		font-size: 1.4rem;
		line-height: 1.15;
		padding: 0 0.4rem;
		cursor: pointer;
		display: inline;
	}

	.language--ar .story-item {
		direction: rtl;
		text-align: right;
	}

	.language--ar .story-item--title.lang--en {
		display: none;
	}

	.language--en .story-item--title.lang--ar {
		display: none;
	}

	/* .story-item--title {
		color: red;
	} */

	@media screen and (min-width: 800px) {
		.story-item {
			outline: 10px solid transparent;
		}

		body:not(.is-dragging) #grid .story-item:not(.filter--read):hover,
		body:not(.is-dragging) .grid-item[data-lastread='never']:hover {
			transform: scale(1.05);
			outline: 0.7rem solid white;
			z-index: 9999;
		}

		body:not(.is-dragging) .filter--read .grid-item[data-lastread='never']:hover .story-item--title {
			color: black;
			background: white;
		}
	}

	.grid-item--link {
		display: none;
		position: absolute;
		background: white;
		color: black;
		padding: 0.25rem 0.5rem;
		bottom: 0;
		right: 0;
		z-index: 9999;
	}

	.grid-item:hover .grid-item--link {
		display: block;
	}

	@media screen and (max-width: 500px) {
		.story-item--title {
			font-size: 1rem;
			height: auto;
		}
	}

	/* List view styles */

	#list .story-item a {
		pointer-events: auto;
	}

	#list.filter--read .story-item:not([data-lastread='never']) {
		opacity: 0.2;
		/* transition: opacity 1s ease-out; */
	}

	#list.filter--read .story-item:not([data-lastread='never']),
	#list.filter--read .story-item:not([data-lastread='never']) * {
		pointer-events: none;
	}

	#list.filter--read .story-item:not([data-lastread='never']):hover,
	#list .filter--read .story-item:not([data-lastread='never']):hover * {
		cursor: move;
	}
</style>
