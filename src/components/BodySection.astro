---
import AttachmentImage from '@components/AttachmentImage.astro'
import IconPlay from '@components/icons/Icon-play.astro'

export interface Props {
	attachments?: string[]
	lang: string
}

const { attachments, lang } = Astro.props as Props

function categoriseAttachments(attachments) {
	const categories = {
		images: { items: [] },
		videos: { items: [] },
		documents: { items: [] },
		audios: { items: [] },
	}

	if (attachments.length > 0) {
		attachments.forEach((attachment) => {
			const extension = attachment.split('.').pop().toLowerCase()

			const attachmentObject = {
				fileName: attachment,
				type: extension,
			}

			switch (extension) {
				case 'jpg':
				case 'png':
				case 'heic':
					categories.images.items.push(attachmentObject)
					break
				case 'mp4':
					categories.videos.items.push(attachmentObject)
					break
				case 'pdf':
				case 'doc':
				case 'docx':
					categories.documents.items.push(attachmentObject)
					break
				case 'm4a':
				case 'wav':
				case 'mp3':
					categories.audios.items.push(attachmentObject)
					break
			}
		})
	}

	return categories
}

const categorisedAttachments = categoriseAttachments(attachments)

// Flatten the categorisedAttachments for rendering
const flattenedAttachments = [
	...categorisedAttachments.images.items.map((item) => ({ ...item, category: 'image' })),
	...categorisedAttachments.videos.items.map((item) => ({ ...item, category: 'video' })),
	...categorisedAttachments.documents.items.map((item) => ({ ...item, category: 'document' })),
	...categorisedAttachments.audios.items.map((item) => ({ ...item, category: 'audio' })),
]

const attachmentItemClassName = `
group 
relative 
w-full 
h-full 
border-white 
border-2 
hover:scale-105 
transition-all 
cursor-pointer 
flex 
flex-col 
gap-3
items-center 
justify-center 
will-change-transform 
bg-black
cursor-pointer
`

// Variable with all the attachments of category image and video
const visibleAttachments = [...categorisedAttachments.images.items, ...categorisedAttachments.videos.items]

let messageContainerClasses = 'col-span-5'
let attachmentContainerClasses = 'grid grid-cols-5 col-span-5 gap-3'

if (visibleAttachments.length > 0 && visibleAttachments.length < 4) {
	messageContainerClasses = 'col-span-5 md:col-span-4'
	attachmentContainerClasses = 'grid md:flex grid-cols-3 md:flex-col col-span-5 md:col-span-1 gap-3'
} else if (visibleAttachments.length === 10) {
	messageContainerClasses = 'col-span-5'
} else if (visibleAttachments.length === 9) {
	messageContainerClasses = 'col-span-5'
	attachmentContainerClasses = 'grid grid-cols-9 col-span-5 gap-3'
} else if (visibleAttachments.length === 0) {
	attachmentContainerClasses = 'hidden'
}
---

<section class='grid grid-cols-5 gap-3 menu--hide'>
	{
		visibleAttachments.length > 0 && (
			<div class={`${attachmentContainerClasses}`}>
				{flattenedAttachments.map((attachment) => {
					switch (attachment.category) {
						// Render image attachments
						case 'image':
							return (
								<div data-lightbox={attachment.fileName} data-type='image' class={`${attachmentItemClassName} basis-0`}>
									<AttachmentImage fileName={attachment.fileName} />
								</div>
							)
						case 'video':
							// Render video attachments
							return (
								<div class={`${attachmentItemClassName} basis-0`} data-lightbox={attachment.fileName} data-type='video'>
									<video class='w-full h-full' muted>
										<source src={`/attachments/${attachment.fileName}`} type='video/mp4' />
									</video>
									<div class='group m-0 z-30 w-8 h-8 flex items-center justify-center absolute'>
										<IconPlay />
									</div>
								</div>
							)
						default:
							return null
					}
				})}
			</div>
		)
	}

	<div class={`${messageContainerClasses}`}>
		<slot name='message' />
	</div>
</section>

<script define:vars={{ lang }}>
	// Track the index of the currently displayed media
	let currentIndex = 0

	// Function to create and show the lightbox
	const mediaElements = document.querySelectorAll('[data-lightbox]')

	document.addEventListener('DOMContentLoaded', () => {
		console.log('DOMContentLoaded')

		mediaElements.forEach((el, index) => {
			el.addEventListener('click', () => {
				currentIndex = index // Update the current index
				showLightbox(currentIndex)
			})
		})
	})

	document.addEventListener('astro:before-swap', () => {
		console.log('astro:before-swap')

		mediaElements.forEach((el, index) => {
			el.removeEventListener('click', () => {
				currentIndex = index // Update the current index
				showLightbox(currentIndex)
			})
		})
	})

	document.addEventListener('astro:after-swap', () => {
		console.log('astro:after-swap')

		mediaElements.forEach((el, index) => {
			el.addEventListener('click', () => {
				currentIndex = index // Update the current index
				showLightbox(currentIndex)
			})
		})
	})

	function showLightbox(index) {
		const mediaType = mediaElements[index].getAttribute('data-type') // 'image' or 'video'
		const source = `/attachments/${mediaElements[index].getAttribute('data-lightbox')}`

		const lightbox = document.createElement('div')
		lightbox.classList.add('fixed')
		lightbox.classList.add('top-0')
		lightbox.classList.add('left-0')
		lightbox.classList.add('w-screen')
		lightbox.classList.add('h-screen')
		lightbox.classList.add('h-screen-ios')
		lightbox.classList.add('bg-black')
		lightbox.classList.add('bg-opacity-80')
		lightbox.classList.add('flex')
		lightbox.classList.add('justify-center')
		lightbox.classList.add('items-center')
		lightbox.classList.add('z-[1000]')
		if (lang === 'ar') {
			lightbox.classList.add('flex-row-reverse')
		}

		// Create close button using SVG
		const closeButton = document.createElement('div')
		closeButton.innerHTML = `
        <div class='absolute top-0 right-10 w-8 h-8 cursor-pointer hover:text-burgundy transition-colors z-50' id='menu-close-button'>
          <svg class='fill-current' width='100%' height='90' viewBox='0 0 90 90' fill='none' xmlns='http://www.w3.org/2000/svg'>
            <path class='fill-current' fill-rule='evenodd' clip-rule='evenodd' d='M1.84937 1.84937C4.02123 -0.317302 7.53683 -0.317302 9.7087 1.84937L44.6674 36.8134L79.626 1.84937C81.7979 -0.317302 85.3135 -0.317302 87.4854 1.84937C89.652 4.02123 89.652 7.53683 87.4854 9.7087L52.5214 44.6674L87.4854 79.626C89.652 81.7979 89.652 85.3135 87.4854 87.4854C85.3135 89.652 81.7979 89.652 79.626 87.4854L44.6674 52.5214L9.7087 87.4854C7.53683 89.652 4.02123 89.652 1.84937 87.4854C-0.317302 85.3135 -0.317302 81.7979 1.84937 79.626L36.8134 44.6674L1.84937 9.7087C-0.317302 7.53683 -0.317302 4.02123 1.84937 1.84937Z'></path>
          </svg>
        </div>
      `
		closeButton.style.position = 'absolute'
		closeButton.style.top = '0'
		closeButton.style.right = '0'
		closeButton.style.zIndex = '1010'
		closeButton.addEventListener('click', () => lightbox.remove())
		lightbox.addEventListener('click', () => lightbox.remove())

		// Also close if pushing the escape key
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape') {
				lightbox.remove()
			}
		})

		// Append the correct media type to the lightbox
		let media
		if (mediaType === 'image') {
			media = document.createElement('img')
			media.src = source
		} else if (mediaType === 'video') {
			media = document.createElement('video')
			media.src = source
			media.controls = true
			media.autoplay = true
		}
		media.style.maxWidth = '90%'
		media.style.maxHeight = '90%'

		if (mediaElements.length > 1) {
			const prevButton = document.createElement('button')
			prevButton.innerText = '←'
			prevButton.classList.add('button--prev')
			prevButton.classList.add('text-3xl')
			prevButton.classList.add('p-5')

			const nextButton = document.createElement('button')
			nextButton.innerText = '→'
			nextButton.classList.add('button--next')
			nextButton.classList.add('text-3xl')
			nextButton.classList.add('p-5')

			prevButton.addEventListener('click', (e) => {
				e.stopPropagation() // Prevent lightbox from closing
				const prevIndex = (index - 1 + mediaElements.length) % mediaElements.length
				lightbox.remove()
				showLightbox(prevIndex)
			})

			nextButton.addEventListener('click', (e) => {
				e.stopPropagation() // Prevent lightbox from closing
				const nextIndex = (index + 1) % mediaElements.length
				lightbox.remove()
				showLightbox(nextIndex)
			})

			lightbox.appendChild(prevButton)
			lightbox.appendChild(media)
			lightbox.appendChild(nextButton)
		} else {
			lightbox.appendChild(media)
		}

		lightbox.appendChild(closeButton)
		document.body.appendChild(lightbox)
	}
</script>
